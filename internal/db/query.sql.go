// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createCycle = `-- name: CreateCycle :one
insert into cycles(session_id, cycle_timer_id, accomplish, started, hazards, energy, morale) values(?,?,?,?,?,?,?) returning id, created_at, session_id, cycle_timer_id, accomplish, started, hazards, energy, morale, target, noteworthy, distractions, improve
`

type CreateCycleParams struct {
	SessionID    int64
	CycleTimerID int64
	Accomplish   string
	Started      string
	Hazards      string
	Energy       int64
	Morale       int64
}

func (q *Queries) CreateCycle(ctx context.Context, arg CreateCycleParams) (Cycle, error) {
	row := q.db.QueryRowContext(ctx, createCycle,
		arg.SessionID,
		arg.CycleTimerID,
		arg.Accomplish,
		arg.Started,
		arg.Hazards,
		arg.Energy,
		arg.Morale,
	)
	var i Cycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SessionID,
		&i.CycleTimerID,
		&i.Accomplish,
		&i.Started,
		&i.Hazards,
		&i.Energy,
		&i.Morale,
		&i.Target,
		&i.Noteworthy,
		&i.Distractions,
		&i.Improve,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
insert into sessions(
       num_cycles,
       start_at,
       start_cycle_timer_id
) values(?, ?, ?) returning id, created_at, status, num_cycles, start_at, start_cycle_timer_id, accomplish, important, complete, distractions, measurable, noteworthy, target, done, compare, bogged, replicate, takeaways, nextsteps
`

type CreateSessionParams struct {
	NumCycles         int64
	StartAt           time.Time
	StartCycleTimerID int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.NumCycles, arg.StartAt, arg.StartCycleTimerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Status,
		&i.NumCycles,
		&i.StartAt,
		&i.StartCycleTimerID,
		&i.Accomplish,
		&i.Important,
		&i.Complete,
		&i.Distractions,
		&i.Measurable,
		&i.Noteworthy,
		&i.Target,
		&i.Done,
		&i.Compare,
		&i.Bogged,
		&i.Replicate,
		&i.Takeaways,
		&i.Nextsteps,
	)
	return i, err
}

const currentSession = `-- name: CurrentSession :one
select id, created_at, status, num_cycles, start_at, start_cycle_timer_id, accomplish, important, complete, distractions, measurable, noteworthy, target, done, compare, bogged, replicate, takeaways, nextsteps
from sessions
where status != 'completed'
order by created_at desc
limit 1
`

func (q *Queries) CurrentSession(ctx context.Context) (Session, error) {
	row := q.db.QueryRowContext(ctx, currentSession)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Status,
		&i.NumCycles,
		&i.StartAt,
		&i.StartCycleTimerID,
		&i.Accomplish,
		&i.Important,
		&i.Complete,
		&i.Distractions,
		&i.Measurable,
		&i.Noteworthy,
		&i.Target,
		&i.Done,
		&i.Compare,
		&i.Bogged,
		&i.Replicate,
		&i.Takeaways,
		&i.Nextsteps,
	)
	return i, err
}

const debriefSession = `-- name: DebriefSession :one
update sessions
set target = ?,
    done = ?,
    compare = ?,
    bogged = ?,
    replicate = ?,
    takeaways = ?,
    nextsteps = ?,
    status = 'completed'
where id = ?
returning id, created_at, status, num_cycles, start_at, start_cycle_timer_id, accomplish, important, complete, distractions, measurable, noteworthy, target, done, compare, bogged, replicate, takeaways, nextsteps
`

type DebriefSessionParams struct {
	Target    int64
	Done      string
	Compare   string
	Bogged    string
	Replicate string
	Takeaways string
	Nextsteps string
	ID        int64
}

func (q *Queries) DebriefSession(ctx context.Context, arg DebriefSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, debriefSession,
		arg.Target,
		arg.Done,
		arg.Compare,
		arg.Bogged,
		arg.Replicate,
		arg.Takeaways,
		arg.Nextsteps,
		arg.ID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Status,
		&i.NumCycles,
		&i.StartAt,
		&i.StartCycleTimerID,
		&i.Accomplish,
		&i.Important,
		&i.Complete,
		&i.Distractions,
		&i.Measurable,
		&i.Noteworthy,
		&i.Target,
		&i.Done,
		&i.Compare,
		&i.Bogged,
		&i.Replicate,
		&i.Takeaways,
		&i.Nextsteps,
	)
	return i, err
}

const prepareSession = `-- name: PrepareSession :one
update sessions
set accomplish = ?,
    important = ?,
    complete = ?,
    distractions = ?,
    measurable = ?,
    noteworthy = ?,
    status = 'prepared'
where id = ?
returning id, created_at, status, num_cycles, start_at, start_cycle_timer_id, accomplish, important, complete, distractions, measurable, noteworthy, target, done, compare, bogged, replicate, takeaways, nextsteps
`

type PrepareSessionParams struct {
	Accomplish   string
	Important    string
	Complete     string
	Distractions string
	Measurable   string
	Noteworthy   string
	ID           int64
}

func (q *Queries) PrepareSession(ctx context.Context, arg PrepareSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, prepareSession,
		arg.Accomplish,
		arg.Important,
		arg.Complete,
		arg.Distractions,
		arg.Measurable,
		arg.Noteworthy,
		arg.ID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Status,
		&i.NumCycles,
		&i.StartAt,
		&i.StartCycleTimerID,
		&i.Accomplish,
		&i.Important,
		&i.Complete,
		&i.Distractions,
		&i.Measurable,
		&i.Noteworthy,
		&i.Target,
		&i.Done,
		&i.Compare,
		&i.Bogged,
		&i.Replicate,
		&i.Takeaways,
		&i.Nextsteps,
	)
	return i, err
}

const sessionCycleByCycleTimerID = `-- name: SessionCycleByCycleTimerID :one
select id, created_at, session_id, cycle_timer_id, accomplish, started, hazards, energy, morale, target, noteworthy, distractions, improve from cycles where session_id = ? and cycle_timer_id = ?
`

type SessionCycleByCycleTimerIDParams struct {
	SessionID    int64
	CycleTimerID int64
}

func (q *Queries) SessionCycleByCycleTimerID(ctx context.Context, arg SessionCycleByCycleTimerIDParams) (Cycle, error) {
	row := q.db.QueryRowContext(ctx, sessionCycleByCycleTimerID, arg.SessionID, arg.CycleTimerID)
	var i Cycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SessionID,
		&i.CycleTimerID,
		&i.Accomplish,
		&i.Started,
		&i.Hazards,
		&i.Energy,
		&i.Morale,
		&i.Target,
		&i.Noteworthy,
		&i.Distractions,
		&i.Improve,
	)
	return i, err
}

const sessionCycles = `-- name: SessionCycles :many
select id, created_at, session_id, cycle_timer_id, accomplish, started, hazards, energy, morale, target, noteworthy, distractions, improve from cycles where session_id = ? order by cycle_timer_id
`

func (q *Queries) SessionCycles(ctx context.Context, sessionID int64) ([]Cycle, error) {
	rows, err := q.db.QueryContext(ctx, sessionCycles, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cycle
	for rows.Next() {
		var i Cycle
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.SessionID,
			&i.CycleTimerID,
			&i.Accomplish,
			&i.Started,
			&i.Hazards,
			&i.Energy,
			&i.Morale,
			&i.Target,
			&i.Noteworthy,
			&i.Distractions,
			&i.Improve,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessions = `-- name: Sessions :many
select id, created_at, status, num_cycles, start_at, start_cycle_timer_id, accomplish, important, complete, distractions, measurable, noteworthy, target, done, compare, bogged, replicate, takeaways, nextsteps from sessions order by created_at desc
`

func (q *Queries) Sessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, sessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Status,
			&i.NumCycles,
			&i.StartAt,
			&i.StartCycleTimerID,
			&i.Accomplish,
			&i.Important,
			&i.Complete,
			&i.Distractions,
			&i.Measurable,
			&i.Noteworthy,
			&i.Target,
			&i.Done,
			&i.Compare,
			&i.Bogged,
			&i.Replicate,
			&i.Takeaways,
			&i.Nextsteps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCycle = `-- name: UpdateCycle :one
update cycles
set target = ?,
    noteworthy = ?,
    distractions = ?,
    improve = ?
where id = ?
returning id, created_at, session_id, cycle_timer_id, accomplish, started, hazards, energy, morale, target, noteworthy, distractions, improve
`

type UpdateCycleParams struct {
	Target       int64
	Noteworthy   string
	Distractions string
	Improve      string
	ID           int64
}

func (q *Queries) UpdateCycle(ctx context.Context, arg UpdateCycleParams) (Cycle, error) {
	row := q.db.QueryRowContext(ctx, updateCycle,
		arg.Target,
		arg.Noteworthy,
		arg.Distractions,
		arg.Improve,
		arg.ID,
	)
	var i Cycle
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SessionID,
		&i.CycleTimerID,
		&i.Accomplish,
		&i.Started,
		&i.Hazards,
		&i.Energy,
		&i.Morale,
		&i.Target,
		&i.Noteworthy,
		&i.Distractions,
		&i.Improve,
	)
	return i, err
}
